#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('cab432assignment2:server');
var http = require('http');
const Twitter = require('./../services/TwitterService');
const Sentiment = require('./../services/SentimentAnalysisService');
const WordAnalysis = require('./../services/WordAnalysisService');
const DynamoDB = require('./../services/DynamoDBService');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

Array.prototype.push_with_limit = function(element, limit){
    var limit = limit || 10;
    var length = this.length;
    if( length == limit ){
        this.shift();
    }
    this.push(element);
};
/*
Create Server and Socket.io Instance
==================*/
const io = require('socket.io').listen(server);
const connections = [];

//Create socket.io Connection with Client
//All Socket Listeners Here
io.on('connection', function(socket) {
    connections.push(socket);
    console.log('%s Connected. %s sockets connected', socket.id, connections.length);

    let prevSearch = false;
    let prevKeyWords;
    let twitterStream;

    let allWords = ['>>'];
    let positiveWords = ['>>'];
    let negativeWords = ['>>'];
    const arrayLimit = 10000;

    let totalTweets = 0;
    let totalScore = 0;

    socket.on('search', function(payload) {
        console.log('Keyword: %s', payload.keyword);

        if(prevSearch) {
            twitterStream.stop();
            //console.log(prevSearch);
            //console.log('stop stream');
            DynamoDB.saveSearch(prevKeyWords, totalScore/totalTweets, allWords, positiveWords, negativeWords);

            totalTweets = 0;
            totalScore = 0;
            allWords = ['>>'];
            positiveWords = ['>>'];
            negativeWords = ['>>'];
            DynamoDB.deleteItem(socket.id);

            setTimeout(function(){ }, 3000);
        } else {
            prevSearch = true;
        }

        prevKeyWords = payload.keyword;
        twitterStream = Twitter.stream(payload.keyword);

        let lastTimestamp = Date.now(),
            speedLimiter = 250; //250ms

        //Turn on Twitter Stream
        twitterStream.on('tweet', function(tweet) {

            //
            if(tweet.timestamp_ms - lastTimestamp > speedLimiter) {
                lastTimestamp = Date.now();

                const sentimentTweet = Sentiment.getSentimentTweet(tweet);

                totalTweets += 1;
                totalScore += sentimentTweet.sentiment.score;
                const avgScore = totalScore/totalTweets;
                // Send Tweet Object to Client
                socket.emit('sendTweet', {tweet: sentimentTweet, avgScore: avgScore, socketID: socket.id});

                const words = WordAnalysis.getWords(tweet.text);
                const posWords = sentimentTweet.sentiment.positive;
                const negWords = sentimentTweet.sentiment.negative;

                words.forEach(function(word) {
                    allWords.push_with_limit(word, arrayLimit);
                });

                posWords.forEach(function(word) {
                    positiveWords.push_with_limit(word, arrayLimit);
                });

                negWords.forEach(function(word) {
                    negativeWords.push_with_limit(word, arrayLimit);
                });


                DynamoDB.updateItem(socket.id, allWords, positiveWords, negativeWords);

            }
        });
    });

    socket.on('disconnect', function(){
        connections.splice(connections.indexOf(socket), 1);
        if (twitterStream) twitterStream.stop();
        socket.disconnect();
        console.log('Socket disconnected: %s sockets remaining', connections.length);
        if (prevSearch) {
            DynamoDB.deleteItem(socket.id)
        }
    });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

//DynamoDB.updateItem('123', ['hi', 'rick'], ['like', 'love'], ['gun', 'helnotlo']);
//var arr = [55, 44, 65];
//var set = new Set(arr);
//console.log(set);
/*
DynamoDB.getItem('rSdtnWHmnAyUaIpgAAAB').then(function (data) {
    console.log(data)
}).catch(function (error) {
    console.error(error)
});

*/
